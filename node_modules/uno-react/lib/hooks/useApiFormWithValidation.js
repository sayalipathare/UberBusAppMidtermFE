"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useApiFormWithValidation = void 0;
var React = __importStar(require("react"));
var useEffectWithDebounce_1 = require("./useEffectWithDebounce");
var useStateForModelWithValidation_1 = require("./useStateForModelWithValidation");
var FormStatus_1 = require("./FormStatus");
function useApiFormWithValidation(dataSource, validation, transform) {
    var _a = useStateForModelWithValidation_1.useStateForModelWithValidation({}, validation, 300), getter = _a[0], setter = _a[1], isValid = _a[2], errors = _a[3], setErrors = _a[4];
    var _b = React.useState(FormStatus_1.FormStatus.Loading), status = _b[0], setStatus = _b[1];
    React.useEffect(function () {
        if (!dataSource)
            return;
        setStatus(FormStatus_1.FormStatus.Loading);
        var data = typeof dataSource === 'function' ? dataSource() : fetch(dataSource);
        if (!data)
            return;
        data.then(function (response) {
            if (response.ok) {
                response.json().then(function (y) {
                    setter(transform ? transform(y) : y);
                    setStatus(isValid ? FormStatus_1.FormStatus.Valid : FormStatus_1.FormStatus.ErrorValidation);
                });
            }
            else {
                setStatus(FormStatus_1.FormStatus.ErrorLoading);
            }
        });
    }, [dataSource]);
    useEffectWithDebounce_1.useEffectWithDebounce(function () {
        if (status !== FormStatus_1.FormStatus.Loading && status !== FormStatus_1.FormStatus.ErrorLoading) {
            setStatus(isValid ? FormStatus_1.FormStatus.Valid : FormStatus_1.FormStatus.ErrorValidation);
        }
    }, 300, [isValid, errors]);
    return [getter, setter, status, errors, setErrors];
}
exports.useApiFormWithValidation = useApiFormWithValidation;
