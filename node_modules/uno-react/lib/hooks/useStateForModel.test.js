"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var react_hooks_1 = require("@testing-library/react-hooks");
var useStateForModel_1 = require("./useStateForModel");
test('Should keep updated the values of a model that are related to an input(event) handling the inputs onChange calls', function () {
    var initialValue = {
        id: 1,
        name: 'John',
        lastName: 'Doe',
    };
    var result = react_hooks_1.renderHook(function () { return useStateForModel_1.useStateForModel(initialValue); }).result;
    var eventInputName = {
        target: { value: 'value name', name: 'name' },
    };
    var eventInputLastName = {
        target: { value: 'value last name', name: 'lastName' },
    };
    react_hooks_1.act(function () {
        result.current[1](eventInputName);
    });
    react_hooks_1.act(function () {
        result.current[1](eventInputLastName);
    });
    initialValue.name = 'value name';
    initialValue.lastName = 'value last name';
    expect(result.current[0]).toStrictEqual(initialValue);
});
test('Should keep updated the values of a model that are related to an input(event) handling the inputs onChange calls adding new property if does not exist.', function () {
    var initialValue = {
        id: 1,
        name: 'John',
        lastName: 'Doe',
    };
    var result = react_hooks_1.renderHook(function () { return useStateForModel_1.useStateForModel(initialValue); }).result;
    var eventInputName = {
        target: { value: 'value name', name: 'name' },
    };
    var eventInputLastName = {
        bubbles: false,
    };
    react_hooks_1.act(function () {
        result.current[1](eventInputName);
    });
    react_hooks_1.act(function () {
        result.current[1](eventInputLastName);
    });
    initialValue.name = 'value name';
    initialValue['bubbles'] = false;
    expect(result.current[0]).toStrictEqual(initialValue);
});
