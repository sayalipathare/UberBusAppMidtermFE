"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useValidation = void 0;
var react_1 = require("react");
var useEffectWithDebounce_1 = require("./useEffectWithDebounce");
var useValidation = function (validation, value, debounce, disabledHasChange) {
    if (debounce === void 0) { debounce = 100; }
    if (disabledHasChange === void 0) { disabledHasChange = false; }
    var _a = react_1.useState({}), errors = _a[0], setErrors = _a[1];
    var _b = react_1.useState(false), isValid = _b[0], setIsValid = _b[1];
    var _c = react_1.useState({}), hasChanged = _c[0], setHasChanged = _c[1];
    useEffectWithDebounce_1.useEffectWithDebounce(function () {
        var _hasChanged = __assign({}, hasChanged);
        var errors = Object.keys(value).reduce(function (last, current) {
            var error = validation(current, value[current], value);
            if (disabledHasChange) {
                last[current] = error;
            }
            else {
                if (error) {
                    last[current] = error;
                    _hasChanged[current] = true;
                }
                else {
                    last[current] = !_hasChanged[current] ? '' : error;
                }
                if (!_hasChanged[current] && value[current] !== value[current]) {
                    _hasChanged[current] = true;
                    last[current] = error;
                }
            }
            return last;
        }, {});
        setHasChanged(_hasChanged);
        var _isValid = !Object.keys(errors).some(function (x) { return errors[x]; }) &&
            (disabledHasChange ||
                !Object.keys(value).some(function (x) { return (_hasChanged[x] === undefined ? false : !_hasChanged[x]); }));
        setErrors(errors);
        setIsValid(_isValid);
    }, debounce, [value]);
    return [isValid, errors];
};
exports.useValidation = useValidation;
