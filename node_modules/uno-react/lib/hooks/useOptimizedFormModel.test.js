"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
require("@testing-library/jest-dom");
var react_1 = require("@testing-library/react");
var user_event_1 = __importDefault(require("@testing-library/user-event"));
var useOptimizedFormModel_1 = require("./useOptimizedFormModel");
var FormStatus_1 = require("./FormStatus");
var jest_fetch_mock_1 = __importDefault(require("jest-fetch-mock"));
var TestComponent = function () {
    var saveResponse = jest.fn();
    var getComment = React.useCallback(function () { return fetch('http://someurl/entity'); }, []);
    var entityTransform = function (response) { return (__assign({}, response)); };
    var _a = useOptimizedFormModel_1.useOptimizedFormModel(getComment, entityTransform), comment = _a[0], onPropChange = _a[1], status = _a[2], flyingChanges = _a[3];
    var onSaveClick = function () {
        var commentUpdated = __assign(__assign({}, comment), flyingChanges());
        saveResponse(commentUpdated);
    };
    return (React.createElement(React.Fragment, null,
        React.createElement("input", { type: "text", "data-testid": "Comment", name: "Comment", value: comment.Comment, onChange: onPropChange }),
        React.createElement("input", { type: "text", "data-testid": "Author", name: "Author", value: comment.Author, onChange: function (event) {
                onPropChange({ Author: event.target.value });
            } }),
        React.createElement("button", { type: "button", onClick: onSaveClick, disabled: status === FormStatus_1.FormStatus.Loading }, "Save")));
};
describe('useOptimizedFormModel', function () {
    beforeEach(function () {
        jest_fetch_mock_1.default.enableMocks();
        jest_fetch_mock_1.default.resetMocks();
    });
    it('should try to load entity immediately', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    jest_fetch_mock_1.default.mockResponse(JSON.stringify({ data: '12345' }));
                    react_1.render(React.createElement(TestComponent, null));
                    return [4 /*yield*/, react_1.waitFor(function () { return expect(jest_fetch_mock_1.default.mock.calls.length).toEqual(1); })];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should update values properly ', function () { return __awaiter(void 0, void 0, void 0, function () {
        var _a, getByText, getByTestId, commentInput, authorInput, button;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    jest_fetch_mock_1.default.mockResponse(JSON.stringify({ data: '12345' }));
                    _a = react_1.render(React.createElement(TestComponent, null)), getByText = _a.getByText, getByTestId = _a.getByTestId;
                    return [4 /*yield*/, react_1.waitFor(function () { return expect(jest_fetch_mock_1.default.mock.calls.length).toEqual(1); })];
                case 1:
                    _b.sent();
                    commentInput = getByTestId('Comment');
                    authorInput = getByTestId('Author');
                    button = getByText('Save');
                    return [4 /*yield*/, user_event_1.default.type(commentInput, 'Comment updated')];
                case 2:
                    _b.sent();
                    expect(commentInput).toHaveValue('Comment updated');
                    return [4 /*yield*/, user_event_1.default.type(authorInput, 'Author updated')];
                case 3:
                    _b.sent();
                    expect(authorInput).toHaveValue('Author updated');
                    user_event_1.default.click(button);
                    expect(authorInput).toHaveValue('Author updated');
                    return [2 /*return*/];
            }
        });
    }); });
});
