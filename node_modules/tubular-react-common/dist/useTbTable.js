"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useTbTable = void 0;
var React = require("react");
var useTubular_1 = require("./useTubular");
var useTbTable = function (initColumns, source, tubularOptions) {
    var tubular = useTubular_1.useTubular(initColumns, source, tubularOptions);
    var _a = React.useState(false), getMultiSort = _a[0], setMultiSort = _a[1];
    var handleKeyDown = function (event) {
        if (event.key === 'Control' && !getMultiSort) {
            setMultiSort(true);
        }
    };
    var handleKeyUp = function (event) {
        if (event.key === 'Control' && getMultiSort) {
            setMultiSort(false);
        }
    };
    React.useEffect(function () {
        document.addEventListener('keydown', handleKeyDown);
        document.addEventListener('keyup', handleKeyUp);
        return function () {
            document.removeEventListener('keydown', handleKeyDown);
            document.removeEventListener('keyup', handleKeyUp);
        };
    }, [getMultiSort]);
    return {
        api: __assign(__assign({}, tubular.api), { sortColumn: function (colName) {
                tubular.api.sortColumn(colName, getMultiSort);
            } }),
        state: tubular.state,
    };
};
exports.useTbTable = useTbTable;
