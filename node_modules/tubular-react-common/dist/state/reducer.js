"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tbReducer = exports.tbInitialState = void 0;
var Actions = require("./actions");
exports.tbInitialState = {
    aggregate: {},
    data: [],
    columns: [],
    error: null,
    filteredRecordCount: -1,
    initialized: false,
    isLoading: false,
    itemsPerPage: -1,
    page: -1,
    searchText: null,
    storage: null,
    totalRecordCount: -1,
};
var tbReducer = function (state, action) {
    if (state === void 0) { state = exports.tbInitialState; }
    switch (action.type) {
        case Actions.GOTO_PAGE: {
            return __assign(__assign({}, state), { page: action.payload });
        }
        case Actions.START_REQUEST: {
            return __assign(__assign({}, state), { isLoading: true });
        }
        case Actions.INIT_GRID_FROM_STORAGE: {
            return __assign(__assign(__assign({}, state), action.payload), { initialized: true });
        }
        case Actions.REQUEST_ERROR: {
            return __assign(__assign({}, state), { error: action.payload, isLoading: false });
        }
        case Actions.REQUEST_SUCCESS: {
            return __assign(__assign(__assign({}, state), action.payload), { isLoading: false });
        }
        case Actions.SET_COLUMNS: {
            return __assign(__assign({}, state), { page: 0, columns: action.payload });
        }
        case Actions.UPDATE_ITEMS_PER_PAGE: {
            return __assign(__assign({}, state), { itemsPerPage: action.payload });
        }
        case Actions.UPDATE_SEARCH_TEXT: {
            return __assign(__assign({}, state), { page: 0, searchText: action.payload });
        }
        default:
            return state;
    }
};
exports.tbReducer = tbReducer;
