"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useTbList = void 0;
var React = require("react");
var useTubular_1 = require("./useTubular");
var useTbList = function (initColumns, source, tubularOptions) {
    var tubular = useTubular_1.useTubular(initColumns, source, tubularOptions);
    var infiniteLoaderRef = React.useRef(null);
    var _a = React.useState({
        hasNextPage: false,
        // We need to hold all the items that we have loaded
        // This will be a cumulated of all of the rows from tubular instance
        items: [],
    }), list = _a[0], setListState = _a[1];
    // Reset list is required to flush cache from
    // Infinite loader
    var resetList = function () {
        infiniteLoaderRef.current.resetLoadMoreRowsCache(true);
        setListState({ hasNextPage: false, items: [] });
        tubular.api.goToPage(0);
    };
    var sortByColumn = function (columnName) {
        resetList();
        tubular.api.sortColumn(columnName);
    };
    var search = function (value) {
        resetList();
        tubular.api.updateSearchText(value);
    };
    React.useEffect(function () {
        setListState(function (state) {
            var _a;
            return {
                hasNextPage: state.items.length + tubular.state.data.length < tubular.state.filteredRecordCount,
                items: (_a = __spreadArrays(state.items)).concat.apply(_a, tubular.state.data),
            };
        });
    }, [tubular.state.data]);
    return {
        // API fort a list should be simpler than
        // the one used for a grid
        api: {
            loadPage: tubular.api.goToPage,
            search: search,
            sortByColumn: sortByColumn,
        },
        state: __assign(__assign({}, tubular.state), { 
            // This is the ref that will be binded
            // to the actual infinite loader component
            infiniteLoaderRef: infiniteLoaderRef,
            list: list }),
    };
};
exports.useTbList = useTbList;
