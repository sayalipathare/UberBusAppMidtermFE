export declare type JsonPrimitives = Record<string, unknown> | string | number | boolean;
export declare type ResponsePromise = JsonPrimitives | JsonPrimitives[];
export declare type ResponseResolver = (response: Response) => Promise<ResponsePromise>;
export declare type HeaderResolver = (url: string, accessToken?: string) => Headers;
export interface FetchOptions {
    headersResolver: HeaderResolver;
    responseResolver: ResponseResolver;
}
export declare const enum RequestMethod {
    Post = "POST",
    Get = "GET",
    Put = "PUT",
    Delete = "DELETE"
}
export declare function getRequest(url: string, accessToken: string, requestMethod: RequestMethod, requestBody: BodyInit, headersResolver: HeaderResolver): Request;
export declare function getResponse(url: string, accessToken: string, requestMethod?: RequestMethod, requestBody?: BodyInit, headersResolver?: HeaderResolver): Promise<Response>;
export declare function requestController(options: FetchOptions, url: string, accessToken?: string, requestMethod?: RequestMethod, requestBody?: BodyInit): Promise<ResponsePromise>;
export declare const defaultOptions: FetchOptions;
export declare function createFetchController(options: FetchOptions): (url: string, accessToken?: string, requestMethod?: RequestMethod, requestBody?: BodyInit) => Promise<ResponsePromise>;
