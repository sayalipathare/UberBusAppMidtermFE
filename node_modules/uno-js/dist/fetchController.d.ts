export declare type JsonPrimitives = Record<string, unknown> | string | number | boolean;
export declare type ResponsePromise = JsonPrimitives | JsonPrimitives[];
export declare type ResponseResolver = (response: Response) => Promise<ResponsePromise>;
export declare type HeadersData = Record<string, () => Promise<string>>;
export interface FetchOptions {
    responseResolver: ResponseResolver;
}
export declare const enum RequestMethod {
    Post = "POST",
    Get = "GET",
    Put = "PUT",
    Delete = "DELETE"
}
export declare function getRequest(url: string, requestMethod: RequestMethod, requestBody: BodyInit, headersData: HeadersData): Promise<Request>;
export declare function getResponse(url: string, requestMethod?: RequestMethod, requestBody?: BodyInit, headersData?: HeadersData): Promise<Response>;
export declare function requestController(responseResolver: ResponseResolver, url: string, requestMethod?: RequestMethod, requestBody?: BodyInit, headersData?: HeadersData): Promise<ResponsePromise>;
export declare function createFetchController(responseResolver?: ResponseResolver): (url: string, requestMethod?: RequestMethod, requestBody?: BodyInit) => Promise<ResponsePromise>;
