"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.install = void 0;
var toDate_1 = require("./toDate");
var humanize_1 = require("./humanize");
var toLocalTime_1 = require("./toLocalTime");
var toTitleCase_1 = require("./toTitleCase");
var truncateText_1 = require("./truncateText");
var objectDifference_1 = require("./objectDifference");
var validateNotNull_1 = require("./validateNotNull");
var removeDuplicated_1 = require("./removeDuplicated");
var install = function () {
    if (!Object.prototype.hasOwnProperty.call(Array, 'toDate')) {
        Object.defineProperty(Array.prototype, 'toDate', {
            value: function () {
                return toDate_1.toDate(this);
            },
        });
    }
    if (!Object.prototype.hasOwnProperty.call(String, 'humanize')) {
        Object.defineProperty(String.prototype, 'humanize', {
            value: function () {
                return humanize_1.humanize(this);
            },
        });
    }
    if (!Object.prototype.hasOwnProperty.call(Date, 'toLocalTime')) {
        Object.defineProperty(Date.prototype, 'toLocalTime', {
            value: function () {
                return toLocalTime_1.toLocalTime(this);
            },
        });
    }
    if (!Object.prototype.hasOwnProperty.call(String, 'toLocalTime')) {
        Object.defineProperty(String.prototype, 'toLocalTime', {
            value: function () {
                return toLocalTime_1.toLocalTime(this);
            },
        });
    }
    if (!Object.prototype.hasOwnProperty.call(String, 'toTitleCase')) {
        Object.defineProperty(String.prototype, 'toTitleCase', {
            value: function () {
                return toTitleCase_1.toTitleCase(this);
            },
        });
    }
    if (!Object.prototype.hasOwnProperty.call(String, 'truncateText')) {
        Object.defineProperty(String.prototype, 'truncateText', {
            value: function (complement, length) {
                return truncateText_1.truncateText(complement, this, length);
            },
        });
    }
    if (!Object.prototype.hasOwnProperty.call(Object, 'objectDifference')) {
        Object.defineProperty(Object.prototype, 'objectDifference', {
            value: function (toCompare) {
                return objectDifference_1.objectDifference(this, toCompare);
            },
        });
    }
    if (!Object.prototype.hasOwnProperty.call(Object, 'validateNotNull')) {
        Object.defineProperty(Object.prototype, 'validateNotNull', {
            value: function () {
                return validateNotNull_1.validateNotNull(this);
            },
        });
    }
    if (!Object.prototype.hasOwnProperty.call(Array, 'removeDuplicated')) {
        Object.defineProperty(Array.prototype, 'removeDuplicated', {
            value: function (prop) {
                return removeDuplicated_1.removeDuplicated(this, prop);
            },
        });
    }
};
exports.install = install;
